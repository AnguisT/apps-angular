// Generated by CoffeeScript 1.7.1
(function() {
  var segmentPlugin;

  segmentPlugin = function(options) {
    var Player, duration, end, index, segments, start;
    Player = this.constructor;
    if (!Player.__superForSegment__) {
      Player.__superForSegment__ = {
        src: Player.prototype.src,
        currentTime: Player.prototype.currentTime,
        duration: Player.prototype.duration,
        bufferedPercent: Player.prototype.bufferedPercent
      };
    }
    index = start = this.segmentStart = end = duration = 0;
    segments = [];

    /*
    The source function updates the video source

    **Array of Source Segment Objects:** To provide multiple source segments so
    that it can be played like a single file.

        myPlayer.src([
          { seconds: 300, src: "http://www.example.com/path/to/video1.mp4" },
          { seconds: 100, src: "http://www.example.com/path/to/video2.mp4" },
          { seconds: 400, src: "http://www.example.com/path/to/video3.mp4" }
        ]);
     */
    return Player.prototype.src = function(source, ignoreImage) {
      var seg, _i, _len, _ref;
      if (source instanceof Array && ((_ref = source[0]) != null ? _ref.seconds : void 0)) {
        this.multiSegments = true;
        var $progressBarContainer;
        if (this.controlBar) {
          $progressBarContainer = $(this.controlBar.progressControl.el_).find(".vjs-slider");
          $progressBarContainer.find(".vjs-segment-position").remove();
        }
        if ($progressBarContainer){
          var durations = source.map(function(a){
            return a.seconds
          });
          var totalDuration = durations.reduce(function(a,b){
            return a + b
          },0);
          if (source[0].src == "") {
            this.duration(totalDuration)
          }
          segments = source;
          for (var i = 0; i < source.length - 1; i ++) {
            var prevDurationSum = 0;
            for (var j = 0; j <= i; j ++) {
              prevDurationSum += durations[j];
            }
            var selfDuration = durations[i];
            $progressBarContainer.append('<div class="vjs-segment-position" style="left: ' + prevDurationSum/totalDuration*100 + '%"></div>')
            if (source[i].restricted) {
              $progressBarContainer.append('<div class="vjs-segment-position" style="left: ' + (prevDurationSum-selfDuration)/totalDuration*100 + '%; width:' + selfDuration/totalDuration*100+ '%"></div>')
            }
          }
        }
        Player.prototype.getCurrentSegment = function (seconds) {
          var foundSegment = segments[0];
          if (seconds < 0 || seconds > duration || seconds > start && seconds < end) {
            return foundSegment;
          }
          var segmentStart = 0;
          index = 0;

          // original: seconds >= segmentStart......
          while (segments[index] && (seconds >= segmentStart + segments[index].seconds)) {
            foundSegment = segments[index];
            segmentStart += segments[index].seconds;
            index++;
          }
          return foundSegment;
        }
        Player.prototype.currentTime = function(seconds) {
          var paused = this.paused();
          var segment = this.getCurrentSegment(seconds);
          if (seconds || seconds ===0) {
            if (seconds === 0) {
              Player.__superForSegment__.currentTime.call(this, 0);
            } else {
              Player.__superForSegment__.currentTime.call(this, seconds - start);
            }
            return this.segmentSeek(seconds);
          } else {
            return Player.__superForSegment__.currentTime.apply(this, arguments) + start;
          }
          if (paused) {
            this.pause();
          }
        };
        Player.prototype.duration = function(seconds) {
          if (seconds) {
            seconds = duration;
          }
          return duration;
          // return Player.__superForSegment__.duration.call(this, seconds);
        };
        Player.prototype.bufferedPercent = function() {
          return Player.__superForSegment__.bufferedPercent.apply(this, arguments) + start / duration;
        };
        Player.prototype.stopImage = function() {
          var playerRef = this;
          clearInterval(this.continuousPosterInterval);
          this.poster("");
         // $(".imfx-big-play-btn").show();
          // restore event
          var btn = $(".vjs-play-pause-button");
          btn.off("mouseup")
        }
        Player.prototype.playImage = function() {
          var playerRef = this;
          var frameInterval = 1000/25;
          playerRef.stopImage();
          playerRef.pause();
          // playerRef.src("", true);
          playerRef.poster("./assets/img/dpsinvert.png");
          $(".imfx-big-play-btn").hide();
          var btn = $(".vjs-play-pause-button");
          playerRef.continuousPosterInterval = setInterval(function() {
            if (btn.hasClass("vjs-paused")) {
              return
            }
            var sec = playerRef.currentTime()+frameInterval/1000;
            playerRef.currentTime(sec)
            playerRef.controlBar.children()[0].children()[0].update()
            if (sec >= end) {
              playerRef.stopImage();
            }
          },frameInterval)
          playerRef.trigger("play");
          // add event

          btn.on("mouseup",function(){
            playerRef.trigger( btn.hasClass("vjs-playing") ? "pause" : "play")
          })
        }
        Player.prototype.segmentSeek = function(seconds) {
          if (seconds < 0 || seconds > duration || seconds > start && seconds < end) {
            return;
          }
          index = start = 0;
          while (segments[index] && (seconds >= start  + segments[index].seconds)) {
          // while (seconds >= start + segments[index].seconds) {
            start += segments[index].seconds;
            index++;
          }
          if (!segments[index]) {
            this.pause();
            return;
          }
          this.segmentStart = start;
          this._segmentOffsetStart = (segments[index].offsetStartAbsSec || 0);
          this._segmentOffsetEnd = (segments[index].offsetEndAbsSec || segments[index].seconds);
          end = start + segments[index].seconds;
          if (segments[index].src) {
            this.stopImage();
            var paused = this.paused();
            this.src(segments[index].src);

            if (this.currentTime() !== seconds) {
              this.currentTime(seconds);
            }
            // if (segments[index-1] && !segments[index-1].src) { // prev item was restricted content placeholder
            //   if (this.currentTime() !== seconds) {
            //     this.currentTime(seconds);
            //   }
            // }

            // this.one('canplay', function() {
            //   if (this.currentTime() !== seconds) {
            //     return this.currentTime(seconds);
            //   }
            // });
            paused || this.play();
          } else {
            var playerRef = this;
            // window.player = this;

            this.src(segments[index].src, true);
            setTimeout(function() {
              playerRef.playImage();
              if (playerRef.currentTime() !== seconds) {
                return playerRef.currentTime(seconds);
              }
            },50);
          }
        };
        duration = 0;
        for (_i = 0, _len = segments.length; _i < _len; _i++) {
          seg = segments[_i];
          segments[index].offsetEndAbsSec = segments[index].offsetEndAbsSec || 0;
          segments[index].offsetStartAbsSec = segments[index].offsetStartAbsSec || 0;
          duration += (segments[index].offsetEnd > 0 ? segments[index].offsetEndAbsSec : seg.seconds)
                         //- segments[index].offsetStartAbsSec)
        }
        end = start + segments[index].seconds;
        this.on('ended', function() {
          if (index < segments.length - 1) {
            start = this.segmentStart = end;
            index++;
            end += segments[index].seconds;
            var playbackRate = this.playbackRate();
            if (segments[index].src) {
              this.src(segments[index].src);
              this.playbackRate(playbackRate);
              return this.play();
            } else {
              var playerRef = this;
              playerRef.currentTime(start);
              // setTimeout(function() {

                // if (playerRef.currentTime() !== seconds) {
                //   return playerRef.currentTime(seconds);
                // }
                // playerRef.playImage();
              // },50);
            }
          }
        });
        return Player.__superForSegment__.src.call(this, source[0].src);
      } else {
        // this.multiSegments = false;
        // if (ignoreImage) {
        //   return Player.__superForSegment__.src.call(this, source, ignoreImage);
        // } else {
          if ((source && source.src === "" || source === "") && !this.cache_.src && !ignoreImage) {
            var playerRef = this;
            setTimeout(function() {
              playerRef.playImage();
            },50)
            return;
          }
        // }
        return Player.__superForSegment__.src.apply(this, arguments);
      }
    };
  };

  window.videojs.plugin('segment', segmentPlugin);

}).call(this);
